@page "/tarefa/editar/{id:int}"
@using Microsoft.AspNetCore.WebUtilities
@inject ISnackbar Snackbar
@inject HttpClient Http

<PageTitle>Nova Tarefa</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium" Class="pa-4">
	<MudText Typo="Typo.h4" Class="mb-4">Nova Tarefa</MudText>
	@if (tarefa == null)
	{
		<MudAlert Severity="Severity.Info" Class="my-4">
			ERRO: Tarefa não encontrada.
		</MudAlert>
		<MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Error"
				   Size="Size.Large" OnClick="() => Cancelar()">
			Voltar
		</MudButton>
	}
	else
	{
		<MudForm Model="tarefa" @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
			<MudGrid>
				<MudItem xs="2">
					<MudTextField Label="ID" value="@tarefa.Id" ReadOnly />
				</MudItem>

				<MudItem xs="10">
					<MudTextField Label="Título" @bind-Value="tarefa.Titulo" Required="true"
								  RequiredError="Título é obrigatório" />
				</MudItem>

				<MudItem xs="12">
					<MudTextField Label="Descrição" @bind-Value="tarefa.Descricao"
								  Lines="3" />
				</MudItem>

				<MudItem xs="12" sm="6">
					<MudSelect Label="Prioridade" @bind-Value="tarefa.PrioridadeTarefa">
						<MudSelectItem Value="0">Baixa</MudSelectItem>
						<MudSelectItem Value="1">Média</MudSelectItem>
						<MudSelectItem Value="2">Alta</MudSelectItem>
					</MudSelect>
				</MudItem>

				<MudItem xs="12" sm="6">
					<MudTextField Label="Criador" value="@usuarios.FirstOrDefault(u => u.Id == tarefa.CriadorId)" ReadOnly />
				</MudItem>

				<MudItem xs="12" sm="6">
					<MudDatePicker Label="Prazo" Editable="true" @bind-Date="_prazo"
								   DateFormat="dd/MM/yyyy" Required="true"
								   RequiredError="Prazo é obrigatório" />
				</MudItem>

				<MudItem xs="12" sm="6">
					<MudSelect Label="Responsável" @bind-Value="tarefa.ResponsavelId">
						@foreach (var usuario in usuarios ?? Enumerable.Empty<UsuarioDTO>())
						{
							<MudSelectItem Value="@usuario.Id">@usuario.Nome</MudSelectItem>
						}
					</MudSelect>
				</MudItem>

				<MudItem xs="12">
					<MudRadioGroup Label="Status" @bind-Value="tarefa.Status">
						<MudRadio Color="Color.Primary" Value="0">Na Fila</MudRadio>
						<MudRadio Color="Color.Default" Value="1">Em Execução</MudRadio>
					</MudRadioGroup>
				</MudItem>

				<MudItem xs="12" Class="d-flex gap-4 mt-4 justify-content-end">
					<MudButton Variant="Variant.Filled" Color="Color.Primary"
							   OnClick="SalvarTarefa">Salvar</MudButton>
					<MudButton Variant="Variant.Outlined" Color="Color.Secondary"
							   OnClick="Cancelar">Cancelar</MudButton>
				</MudItem>
			</MudGrid>
		</MudForm>
	}
</MudContainer>

@code {
	[Parameter]
	public int Id { get; set; }

	private TarefaDTO? tarefa;
	private List<UsuarioDTO>? usuarios;
	private bool success;
	private string[] errors = { };
	private MudForm form;
	private DateTime? _prazo = DateTime.Now.AddDays(2);

	protected override async Task OnInitializedAsync()
	{
		await CarregarListaUsuarios();

		try
		{
			var response = await Http.GetAsync($"Tarefa/{Id}");

			if (!response.IsSuccessStatusCode)
				throw new Exception($"API retornou status {response.StatusCode}");

			tarefa = await response.Content.ReadFromJsonAsync<TarefaDTO>();

		}
		catch (Exception ex)
		{
			Snackbar.Add(ex.Message, Severity.Error);
			Console.WriteLine($"Erro ao carregar tarefas: {ex.Message}");
		}
	}

	private async Task CarregarListaUsuarios()
	{
		try
		{
			var response = await Http.GetAsync("Usuario");
			if (!response.IsSuccessStatusCode)
				throw new Exception($"API retornou status {response.StatusCode}");

			usuarios = await response.Content.ReadFromJsonAsync<List<UsuarioDTO>>() ?? new List<UsuarioDTO>();
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Erro ao carregar usuarios: {ex.Message}");
			usuarios = new List<UsuarioDTO>();
		}
	}

	private async Task SalvarTarefa()
	{
		try
		{
			await form.Validate();
			if (!success)
				return;
			if (!_prazo.HasValue)
				return;

			tarefa.Prazo = _prazo.Value;

			var response = await Http.PostAsJsonAsync("Tarefa", tarefa);

			if (!response.IsSuccessStatusCode)
				throw new Exception(await response.Content.ReadAsStringAsync());

			NavigationManager.NavigateTo("/tarefa/lista");
		}
		catch (Exception ex)
		{
			Snackbar.Add($"Erro ao salvar tarefa: {ex.Message}", Severity.Error);
			Console.WriteLine($"Erro ao salvar tarefa: {ex.Message}");
			if (ex.InnerException != null)
				Console.WriteLine($"Inner exception: {ex.InnerException.Message}");
		}
	}

	private void Cancelar()
		=> NavigationManager.NavigateTo("/tarefa/lista");
}