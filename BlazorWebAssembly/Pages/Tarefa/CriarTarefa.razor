@page "/tarefa/criar"
@using Microsoft.AspNetCore.WebUtilities
@inject ISnackbar Snackbar
@inject HttpClient Http
@inject UsuarioServico usuarioServico

<PageTitle>Nova Tarefa</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium" Class="pa-4">
	<MudText Typo="Typo.h4" Class="mb-4">Nova Tarefa</MudText>

	<MudForm Model="tarefa" @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
		<MudGrid>
			<MudItem xs="12">
				<MudTextField Label="Título" @bind-Value="tarefa.Titulo" Required="true"
							  RequiredError="Título é obrigatório" />
			</MudItem>

			<MudItem xs="12">
				<MudTextField Label="Descrição" @bind-Value="tarefa.Descricao"
							  Lines="3" />
			</MudItem>

			<MudItem xs="12" sm="6">
				<MudSelect Label="Criador" @bind-Value="tarefa.CriadorId">
					@foreach (var usuario in usuarios ?? Enumerable.Empty<UsuarioDTO>())
					{
						<MudSelectItem Value="@usuario.Id">@usuario.Nome</MudSelectItem>
					}
				</MudSelect>
			</MudItem>

			<MudItem xs="12" sm="6">
				<MudSelect Label="Responsável" @bind-Value="tarefa.ResponsavelId">
					@foreach (var usuario in usuarios ?? Enumerable.Empty<UsuarioDTO>())
					{
						<MudSelectItem Value="@usuario.Id">@usuario.Nome</MudSelectItem>
					}
				</MudSelect>
			</MudItem>

			<MudItem xs="12" sm="6">
				<MudField Label="Prioridade" Variant="Variant.Text" InnerPadding="false">
					<MudChipSet CheckMark Size="Size.Small"
								@bind-SelectedValue="tarefa.PrioridadeTarefa"
								SelectionMode="SelectionMode.SingleSelection">
						@foreach (var prioridade in prioridades)
						{
							<MudChip Icon="@prioridade.Icone" Color="@prioridade.Cor" Variant="Variant.Text" Value="@prioridade.Id">
								@prioridade.Nome
							</MudChip>
						}
					</MudChipSet>
				</MudField>
			</MudItem>

			<MudItem xs="12" sm="6">
				<MudDatePicker Label="Prazo" Editable="true" @bind-Date="_prazo"
							   DateFormat="dd/MM/yyyy" Required="true"
							   RequiredError="Prazo é obrigatório" />
			</MudItem>

			<MudItem xs="12" Class="d-flex gap-4 mt-4 justify-content-end">
				<MudButton Variant="Variant.Outlined" Color="Color.Secondary"
						   OnClick="Cancelar">Cancelar</MudButton>
				<MudButton Variant="Variant.Filled" Color="Color.Primary"
						   OnClick="SalvarTarefa">Salvar</MudButton>
			</MudItem>
		</MudGrid>
	</MudForm>
</MudContainer>

@code {
	private TarefaDTO tarefa = new();
	private List<UsuarioDTO>? usuarios;
	private List<TarefaPrioridade> prioridades = TarefaPrioridade.Carregar();
	private bool success;
	private string[] errors = { };
	private MudForm? form;
	private DateTime? _prazo = DateTime.Now.AddDays(2);

	protected override async Task OnInitializedAsync()
	{
		usuarios = await usuarioServico.Lista();
		tarefa.CriadorId = usuarios?.FirstOrDefault()?.Id ?? 0;
		tarefa.ResponsavelId = usuarios?.FirstOrDefault()?.Id ?? 0;
	}

	private async Task SalvarTarefa()
	{
		try
		{
			if (form is null) return;

			await form.Validate();
			if (!success)
				return;
			if (!_prazo.HasValue)
				return;

			tarefa.Prazo = _prazo.Value;
			tarefa.Status = 0; // Fila

			var response = await Http.PostAsJsonAsync("Tarefa", tarefa);

			if (!response.IsSuccessStatusCode)
				throw new Exception(await response.Content.ReadAsStringAsync());

			NavigationManager.NavigateTo("/tarefa/lista");
		}
		catch (Exception ex)
		{
			Snackbar.Add($"Erro ao salvar tarefa: {ex.Message}", Severity.Error);
			Console.WriteLine($"Erro ao salvar tarefa: {ex.Message}");
			if (ex.InnerException != null)
				Console.WriteLine($"Inner exception: {ex.InnerException.Message}");
		}
	}

	private void Cancelar()
		=> NavigationManager.NavigateTo("/tarefa/lista");
}