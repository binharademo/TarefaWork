@page "/tarefa/board"
@inject ISnackbar Snackbar
@inject HttpClient Http
@inject UsuarioServico usuarioServico
@inject TarefaServico tarefaServico

<PageTitle>Quadro de Tarefas</PageTitle>

<MudContainer Class="mt-4">
	<MudPaper Elevation="3" Class="pa-4">
		<MudText Typo="Typo.h4" Class="mb-4">Quadro de Tarefas</MudText>

		<MudGrid Class="mb-4">
			<MudItem>
				<MudButton Variant="Variant.Filled"
						   Color="Color.Success"
						   StartIcon="@Icons.Material.Filled.Add"
						   OnClick="NavegarParaCriacao">
					Nova Tarefa
				</MudButton>
			</MudItem>
			<MudItem>
				<MudButton Variant="Variant.Outlined"
						   Color="Color.Primary"
						   StartIcon="@Icons.Material.Filled.List"
						   Href="/tarefa/lista">
					Ver Lista de Tarefas
				</MudButton>
			</MudItem>
			<MudSpacer />
			<MudItem class="d-flex justify-end">
				<MudButton Variant="Variant.Text"
						   Color="Color.Primary"
						   OnClick="async () => { await Recarregar(); StateHasChanged(); }"
						   StartIcon="@Icons.Material.Filled.Refresh">
					Atualizar
				</MudButton>
			</MudItem>

		</MudGrid>

		@if (tarefas == null)
		{
			<MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
			<MudText Align="Align.Center">Carregando...</MudText>
		}
		else
		{
			<MudDropContainer T="TarefaDTO"
							  Items="tarefas"
							  ItemsSelector="@((item,dropzone) => item.Status.ToString() == dropzone)"
							  ItemDropped="ItemUpdated"
							  Class="d-flex flex-row flex-grow-1 pb-3 overflow-x-auto gap-2">
				<ChildContent>
					@foreach (var status in statusList)
					{
						<MudDropZone T="TarefaDTO"
									 Identifier="@status.Id.ToString()"
									 Style="min-width: 250px; min-height: 300px;max-width: 400px;"
									 Class="rounded-lg border-2 border-solid mud-border-lines-default pa-2 flex-grow-1 flex-shrink-0">
							<MudText Typo="Typo.h6" Class="px-2 py-1 d-flex align-center">
								<MudIcon Icon="@status.Icone" Color="@status.Cor" Class="mr-2" />
								@status.Nome
								<MudSpacer />
								<MudBadge Content="@tarefas.Count(t => t.Status == status.Id)"
										  Color="Color.Secondary"
										  Overlap="false"
										  Class="mr-2 object-right">
								</MudBadge>
							</MudText>
						</MudDropZone>
					}
				</ChildContent>
				<ItemRenderer>
					<MudCard Elevation="1" Class="mt-2">
						<MudCardHeader>
							<CardHeaderContent>
								<MudText Typo="Typo.subtitle1">@context.Titulo</MudText>
							</CardHeaderContent>
							<CardHeaderActions>
								<MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default"
											   OnClick="() => NavegarParaDetalhes(context.Id)" />
							</CardHeaderActions>
						</MudCardHeader>
						<MudCardContent Class="py-2">
							<MudText Typo="Typo.body2">@context.Descricao</MudText>
							<MudText Typo="Typo.caption">@(usuarios?.FirstOrDefault(u => u.Id == context.ResponsavelId)?.Nome ?? "Não Encontrado")</MudText>
						</MudCardContent>
						<MudCardActions>
							<MudChip T="string" Size="Size.Small"
									 Color="@prioridades.First(p => p.Id == context.PrioridadeTarefa).Cor"
									 Icon="@prioridades.First(p => p.Id == context.PrioridadeTarefa).Icone"
									 Variant="Variant.Filled">
								@prioridades.First(p => p.Id == context.PrioridadeTarefa).Nome
							</MudChip>
							<MudSpacer />
							<MudIconButton Icon="@Icons.Material.Filled.Edit"
										   Color="Color.Primary"
										   Size="Size.Small"
										   OnClick="() => NavegarParaEdicao(context.Id)" />
						</MudCardActions>
					</MudCard>
				</ItemRenderer>

			</MudDropContainer>
		}
	</MudPaper>
</MudContainer>

@code {
	private List<TarefaStatus> statusList = TarefaStatus.Carregar();
	private List<TarefaPrioridade> prioridades = TarefaPrioridade.Carregar();
	private List<UsuarioDTO>? usuarios;
	private List<TarefaDTO>? tarefas;

	protected override async Task OnInitializedAsync()
	{
		await Recarregar();
	}

	private async Task Recarregar()
	{
		usuarios = await usuarioServico.Lista();
		tarefas = await tarefaServico.Lista();
	}

	private async Task ItemUpdated(MudItemDropInfo<TarefaDTO> dropInfo)
	{
		if (dropInfo.Item is null)
			return;

		// Obtém o novo status da coluna de destino
		if (!int.TryParse(dropInfo.DropzoneIdentifier, out int newStatusId))
			return;

		// Atualiza o status da tarefa localmente
		dropInfo.Item.Status = newStatusId;

		// Envia a atualização para a API
		var response = await Http.PutAsync($"tarefa/{dropInfo.Item.Id}/status/{newStatusId}", null);

		if (!response.IsSuccessStatusCode)
		{
			Snackbar.Add("Erro ao mover a tarefa.", Severity.Error);
			// Se falhar, recarrega as tarefas do servidor para garantir consistência
			await Recarregar();
			StateHasChanged();
		}
	}

	private void NavegarParaDetalhes(int id)
	{
		NavigationManager.NavigateTo($"/tarefa/{id}?backTo=tarefa/board");
	}

	private void NavegarParaCriacao()
	{
		NavigationManager.NavigateTo("/tarefa/criar");
	}

	private void NavegarParaEdicao(int id)
	{
		NavigationManager.NavigateTo($"/tarefa/editar/{id}?backTo=tarefa/board");
	}
}