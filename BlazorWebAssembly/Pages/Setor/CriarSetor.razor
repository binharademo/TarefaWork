@page "/setor/criar"
@using Microsoft.AspNetCore.WebUtilities
@using System.ComponentModel.DataAnnotations
@using System.Text.RegularExpressions
@inject ISnackbar Snackbar
@inject EmpresaServico empresaServico
@inject SetorServico setorServico

<PageTitle>Novo Setor</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium" Class="pa-4">
	<MudText Typo="Typo.h4">
		<MudIcon Icon="@Icons.Material.Filled.Folder" /> Gerenciador de Setores
	</MudText>

	<MudPaper Class="pa-4 mt-4" Elevation="3">
		<MudText Typo="Typo.h5" Class="mb-4">
			<MudIcon Icon="@Icons.Material.Filled.AddCircle" /> Novo Setor
		</MudText>


		<MudForm Model="setor" @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
			<MudGrid>
				<MudItem xs="12">
					<MudTextField Label="Nome" @bind-Value="setor.Nome" Required="true"
								  RequiredError="Nome é obrigatório" />
				</MudItem>

				<MudItem xs="2">
					<MudField Label="Status" Variant="Variant.Text" Underline="false" InnerPadding="false">
						<MudSwitch @bind-Value="setor.Status" Color="Color.Primary" />
					</MudField>
				</MudItem>

				<MudItem xs="10">
					<MudSelect T="int?" Label="Empresa" @bind-Value="setor.EmpresaId" required
							   RequiredError="Empresa é obrigatório">
						@foreach (var empresa in empresas ?? [])
						{
							<MudSelectItem T="int?" Value="@empresa.Id">@empresa.Nome</MudSelectItem>
						}
					</MudSelect>
				</MudItem>

				<MudItem xs="12" Class="d-flex gap-4 mt-4 justify-content-end">
					<MudButton Variant="Variant.Outlined" Color="Color.Secondary"
							   OnClick="Cancelar">Cancelar</MudButton>
					<MudButton Variant="Variant.Filled" Color="Color.Primary"
							   OnClick="SalvarSetor">Salvar</MudButton>
				</MudItem>
			</MudGrid>
		</MudForm>
	</MudPaper>
</MudContainer>

@code {
	private SetorDTO setor = new();
	private List<EmpresaDTO>? empresas;
	private bool success;
	private string[] errors = { };
	private MudForm? form;

	protected override async Task OnInitializedAsync()
	{
		empresas = await empresaServico.Lista();
	}

	private async Task SalvarSetor()
	{
		try
		{
			if (form is null || setor is null)
			{
				Snackbar.Add($"Erro ao salvar setor: {form is null} {setor is null} ", Severity.Error);
				return;
			}

			await form.Validate();
			if (!success)
			{
				Snackbar.Add($"Erro ao salvar setor: form inválido ", Severity.Error);
				return;
			}

			if (setor.EmpresaId == 0) //TODO: Validation
			{
				Snackbar.Add($"Erro ao salvar setor: form inválido ", Severity.Error);
				return;
			}

			var erro = await setorServico.Salva(setor.Id, setor);
			if (!string.IsNullOrWhiteSpace(erro))
			{
				Snackbar.Add($"Erro ao salvar setor: {erro}", Severity.Error);
				Console.WriteLine($"Erro ao salvar setor: {erro}");
				return;
			}

			NavigationManager.NavigateTo("/setor/lista");
		}
		catch (Exception ex)
		{
			Snackbar.Add($"Erro ao salvar setor: {ex.Message}", Severity.Error);
			Console.WriteLine($"Erro ao salvar setor: {ex.Message}");
			if (ex.InnerException != null)
				Console.WriteLine($"Inner exception: {ex.InnerException.Message}");
		}
	}


	private void Cancelar()
		=> NavigationManager.NavigateTo("/setor/lista");
}