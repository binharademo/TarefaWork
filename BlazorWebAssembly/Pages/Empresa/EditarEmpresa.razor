@page "/empresa/editar/{id:int}"
@using Microsoft.AspNetCore.WebUtilities
@using System.ComponentModel.DataAnnotations
@using System.Text.RegularExpressions
@inject ISnackbar Snackbar
@inject HttpClient Http

<PageTitle>Editar Empresa</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium" Class="pa-4">
	<MudText Typo="Typo.h4" Class="mb-4">Editar Empresa</MudText>

	@if (empresa == null)
	{
		<MudAlert Severity="Severity.Info" Class="my-4">
			ERRO: Empresa não encontrada.
		</MudAlert>
		<MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Error"
		Size="Size.Large" OnClick="() => Cancelar()">
			Voltar
		</MudButton>
	}
	else
	{
		<MudForm Model="empresa" @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
			<MudGrid>
				<MudItem xs="2">
					<MudTextField Variant="Variant.Filled" Label="ID" @bind-Value="empresa.Id" ReadOnly />
				</MudItem>
				<MudItem xs="10">
					<MudTextField Label="Nome" @bind-Value="empresa.Nome" Required="true"
								  RequiredError="Nome é obrigatório" />
				</MudItem>
				<MudItem xs="12">
					<MudTextField Variant="Variant.Filled" Label="CNPJ" @bind-Value="empresa.Cnpj" Required="true"
								  RequiredError="CNPJ é obrigatório"
								  Mask="@(new PatternMask("00.000.000/0000-00"))" ReadOnly/>
				</MudItem>

				<MudItem xs="12" Class="d-flex gap-4 mt-4 justify-content-end">
					<MudButton Variant="Variant.Outlined" Color="Color.Secondary"
							   OnClick="Cancelar">Cancelar</MudButton>
					<MudButton Variant="Variant.Filled" Color="Color.Primary"
							   OnClick="SalvarEmpresa">Salvar</MudButton>
				</MudItem>
			</MudGrid>
		</MudForm>
	}
</MudContainer>

@code {
	[Parameter]
	public int Id { get; set; }

	private EmpresaDTO empresa;
	private bool success;
	private string[] errors = { };
	private MudForm? form;

	protected override async Task OnInitializedAsync()
	{
		try
		{
			var response = await Http.GetAsync($"Empresa/{Id}");

			if (!response.IsSuccessStatusCode)
			{
				Snackbar.Add($"Erro ao carregar empresa: {response.StatusCode}", Severity.Error);
				Console.WriteLine($"Erro ao carregar empresa: {response.StatusCode}");
				return;
			}

			empresa = await response.Content.ReadFromJsonAsync<EmpresaDTO>() ?? new();

		}
		catch (Exception ex)
		{
			Snackbar.Add("Erro ao carregar empresa", Severity.Error);
			Console.WriteLine($"Erro ao carregar empresa: {ex.Message}");
		}
	}

	private async Task SalvarEmpresa()
	{
		try
		{
			if (form is null) return;

			await form.Validate();
			if (!success)
				return;

			var response = await Http.PutAsJsonAsync($"Empresa/{Id}", empresa);

			if (!response.IsSuccessStatusCode){
				Snackbar.Add($"Erro ao salvar empresa: {response.StatusCode}", Severity.Error);
				Console.WriteLine($"Erro ao salvar empresa: {response.StatusCode}");
				return;
			}

			NavigationManager.NavigateTo("/empresa/lista");
		}
		catch (Exception ex)
		{
			Snackbar.Add($"Erro ao salvar empresa: {ex.Message}", Severity.Error);
			Console.WriteLine($"Erro ao salvar empresa: {ex.Message}");
			if (ex.InnerException != null)
				Console.WriteLine($"Inner exception: {ex.InnerException.Message}");
		}
	}

	private void Cancelar()
		=> NavigationManager.NavigateTo("/empresa/lista");
}