@page "/setor/criar"
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject SetorServico SetorServico
@inject EmpresaServico EmpresaServico
<PageTitle>Novo Setor</PageTitle>
<h1>Novo Setor</h1>
<EditForm Model="setor" OnValidSubmit="SalvarSetor" FormName="novoSetorForm">
    <DataAnnotationsValidator />
    <div class="form-group mb-3">
        <label>Nome</label>
        <InputText class="form-control" @bind-Value="setor.Nome" />
        <ValidationMessage For="() => setor.Nome" />
    </div>
    <div class="form-group mb-3">
        <label>Empresa</label>
        <InputSelect class="form-control" @bind-Value="setor.EmpresaId">
            <option value="">Selecione...</option> 
            @if (empresas != null)
            {
                @foreach (var empresa in empresas)
                {
                    <option value="@empresa.Id">@empresa.Nome</option>
                }
            }
        </InputSelect>
    </div>
    <div class="form-group mb-3">
        <label>Status</label>
        <InputRadioGroup @bind-Value="setor.Status">
            <div class="form-check">
                <InputRadio class="form-check-input" Value="true" />
                <label class="form-check-label">Ativo</label>
            </div>
            <div class="form-check">
                <InputRadio class="form-check-input" Value="false" />
                <label class="form-check-label">Inativo</label>
            </div>
        </InputRadioGroup>
        <ValidationMessage For="() => setor.Status" />
    </div>
    <button type="submit" class="btn btn-success">Salvar</button>
    <button type="button" class="btn btn-secondary" @onclick="Cancelar">Cancelar</button>
</EditForm>
@code {
    private CriarSetorDTO setor = new() { Status = true };
    private List<EmpresaDTO> empresas = new List<EmpresaDTO>();

    private async Task SalvarSetor()
    {
        try
        {
            Console.WriteLine("Método SalvarSetor chamado");
            await SetorServico.Adicionar(setor);
            NavigationManager.NavigateTo("/setor/listar");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao salvar setor: {ex.Message}");
            // Você pode adicionar um tratamento de erro aqui
        }
    }

    private void Cancelar()
    {
        NavigationManager.NavigateTo("/setor/listar");
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Carrega a lista de empresas ao inicializar a página
            empresas = await EmpresaServico.BuscaTodos() ?? new List<EmpresaDTO>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar empresas: {ex.Message}");
            empresas = new List<EmpresaDTO>(); // Garante que empresas não será nulo em caso de erro
        }
    }
}